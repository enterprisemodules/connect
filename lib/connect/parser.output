

-------- Grammar --------

rule 1 dsl: config
rule 2 dsl: dsl config
rule 3 number: INTEGER
rule 4 number: FLOAT
rule 5 config: assignment
rule 6 config: connection
rule 7 config: include_file
rule 8 config: definition
rule 9 config: default_scope
rule 10 selector: 
rule 11 selector: SELECTOR
rule 12 with_scope_do: WITH SCOPE DO
rule 13 with_scope_bracket: WITH SCOPE "{"
rule 14 default_scope: with_scope_do dsl END
rule 15 default_scope: with_scope_bracket dsl "}"
rule 16 literal: SCOPE IDENTIFIER
rule 17 literal: IDENTIFIER
rule 18 string: DOUBLE_QUOTED
rule 19 string: SINGLE_QUOTED
rule 20 scalar: string
rule 21 scalar: number
rule 22 scalar: BOOLEAN
rule 23 scalar: UNDEF
rule 24 value: scalar
rule 25 value: array
rule 26 value: hash
rule 27 value: definition
rule 28 reference: literal
rule 29 expression: value "^" value
rule 30 expression: value "*" value
rule 31 expression: value "/" value
rule 32 expression: value "+" value
rule 33 expression: value "-" value
rule 34 expression: value OR value
rule 35 expression: value AND value
rule 36 expression: value
rule 37 array: "[" values optional_comma "]"
rule 38 array: "[" reference "," values optional_comma "]"
rule 39 array: "[" reference optional_comma "]"
rule 40 array: "[" "]"
rule 41 hash: "{" hashpairs optional_comma "}"
rule 42 hash: "{" "}"
rule 43 optional_comma: 
rule 44 optional_comma: ","
rule 45 hashpairs: hashpair
rule 46 hashpairs: hashpairs "," hashpair
rule 47 hashkey: IDENTIFIER
rule 48 hashkey: scalar
rule 49 hashpair: hashkey ":" value
rule 50 hashpair: hashkey HASH_ROCKET value
rule 51 hashpair: hashkey ":" reference
rule 52 hashpair: hashkey HASH_ROCKET reference
rule 53 hashpair: definition
rule 54 values: values "," value
rule 55 values: values "," reference
rule 56 values: value
rule 57 assignment: literal "=" expression selector
rule 58 connection: literal "=" literal selector
rule 59 include_file: INCLUDE string
rule 60 include_file: INCLUDE string INTO SCOPE
rule 61 definition: IDENTIFIER "(" string ")" iterator block
rule 62 definition: IDENTIFIER "(" literal ")" iterator block
rule 63 block: 
rule 64 block: "{" hashpairs optional_comma "}"
rule 65 block: DO hashpairs optional_comma END
rule 66 iterator: 
rule 67 iterator: FROM INTEGER TO INTEGER

------- Symbols -------

**Nonterminals, with rules where they appear

  $start (35)
    on right: 
    on left : 
  dsl (36)
    on right: 2 14 15
    on left : 1 2
  config (37)
    on right: 1 2
    on left : 5 6 7 8 9
  number (38)
    on right: 21
    on left : 3 4
  assignment (39)
    on right: 5
    on left : 57
  connection (40)
    on right: 6
    on left : 58
  include_file (41)
    on right: 7
    on left : 59 60
  definition (42)
    on right: 8 27 53
    on left : 61 62
  default_scope (43)
    on right: 9
    on left : 14 15
  selector (44)
    on right: 57 58
    on left : 10 11
  with_scope_do (45)
    on right: 14
    on left : 12
  with_scope_bracket (46)
    on right: 15
    on left : 13
  literal (47)
    on right: 28 57 58 62
    on left : 16 17
  string (48)
    on right: 20 59 60 61
    on left : 18 19
  scalar (49)
    on right: 24 48
    on left : 20 21 22 23
  value (50)
    on right: 29 30 31 32 33 34 35 36 49 50 54 56
    on left : 24 25 26 27
  array (51)
    on right: 25
    on left : 37 38 39 40
  hash (52)
    on right: 26
    on left : 41 42
  reference (53)
    on right: 38 39 51 52 55
    on left : 28
  expression (54)
    on right: 57
    on left : 29 30 31 32 33 34 35 36
  values (55)
    on right: 37 38 54 55
    on left : 54 55 56
  optional_comma (56)
    on right: 37 38 39 41 64 65
    on left : 43 44
  hashpairs (57)
    on right: 41 46 64 65
    on left : 45 46
  hashpair (58)
    on right: 45 46
    on left : 49 50 51 52 53
  hashkey (59)
    on right: 49 50 51 52
    on left : 47 48
  iterator (60)
    on right: 61 62
    on left : 66 67
  block (61)
    on right: 61 62
    on left : 63 64 65

**Terminals, with rules where they appear

  $end (0) 
  error (1) 
  SCOPE (2) 12 13 16 60
  IDENTIFIER (3) 16 17 47 61 62
  INTEGER (4) 3 67
  FLOAT (5) 4
  SELECTOR (6) 11
  WITH (7) 12 13
  DO (8) 12 65
  "{" (9) 13 41 42 64
  END (10) 14 65
  "}" (11) 15 41 42 64
  DOUBLE_QUOTED (12) 18
  SINGLE_QUOTED (13) 19
  BOOLEAN (14) 22
  UNDEF (15) 23
  "^" (16) 29
  "*" (17) 30
  "/" (18) 31
  "+" (19) 32
  "-" (20) 33
  OR (21) 34
  AND (22) 35
  "[" (23) 37 38 39 40
  "]" (24) 37 38 39 40
  "," (25) 38 44 46 54 55
  ":" (26) 49 51
  HASH_ROCKET (27) 50 52
  "=" (28) 57 58
  INCLUDE (29) 59 60
  INTO (30) 60
  "(" (31) 61 62
  ")" (32) 61 62
  FROM (33) 67
  TO (34) 67

--------- State ---------

state 0


  SCOPE         shift, and go to state 11
  IDENTIFIER    shift, and go to state 12
  WITH          shift, and go to state 8
  INCLUDE       shift, and go to state 14

  dsl           go to state 1
  config        go to state 2
  assignment    go to state 3
  connection    go to state 4
  include_file  go to state 5
  definition    go to state 6
  default_scope  go to state 7
  with_scope_do  go to state 9
  with_scope_bracket  go to state 10
  literal       go to state 13

state 1

   2) dsl : dsl _ config

  $end          shift, and go to state 15
  SCOPE         shift, and go to state 11
  IDENTIFIER    shift, and go to state 12
  WITH          shift, and go to state 8
  INCLUDE       shift, and go to state 14

  config        go to state 16
  assignment    go to state 3
  connection    go to state 4
  include_file  go to state 5
  definition    go to state 6
  default_scope  go to state 7
  with_scope_do  go to state 9
  with_scope_bracket  go to state 10
  literal       go to state 13

state 2

   1) dsl : config _

  $default      reduce using rule 1 (dsl)


state 3

   5) config : assignment _

  $default      reduce using rule 5 (config)


state 4

   6) config : connection _

  $default      reduce using rule 6 (config)


state 5

   7) config : include_file _

  $default      reduce using rule 7 (config)


state 6

   8) config : definition _

  $default      reduce using rule 8 (config)


state 7

   9) config : default_scope _

  $default      reduce using rule 9 (config)


state 8

  12) with_scope_do : WITH _ SCOPE DO
  13) with_scope_bracket : WITH _ SCOPE "{"

  SCOPE         shift, and go to state 17


state 9

  14) default_scope : with_scope_do _ dsl END

  SCOPE         shift, and go to state 11
  IDENTIFIER    shift, and go to state 12
  WITH          shift, and go to state 8
  INCLUDE       shift, and go to state 14

  config        go to state 2
  dsl           go to state 18
  assignment    go to state 3
  connection    go to state 4
  include_file  go to state 5
  definition    go to state 6
  default_scope  go to state 7
  with_scope_do  go to state 9
  with_scope_bracket  go to state 10
  literal       go to state 13

state 10

  15) default_scope : with_scope_bracket _ dsl "}"

  SCOPE         shift, and go to state 11
  IDENTIFIER    shift, and go to state 12
  WITH          shift, and go to state 8
  INCLUDE       shift, and go to state 14

  config        go to state 2
  dsl           go to state 19
  assignment    go to state 3
  connection    go to state 4
  include_file  go to state 5
  definition    go to state 6
  default_scope  go to state 7
  with_scope_do  go to state 9
  with_scope_bracket  go to state 10
  literal       go to state 13

state 11

  16) literal : SCOPE _ IDENTIFIER

  IDENTIFIER    shift, and go to state 20


state 12

  17) literal : IDENTIFIER _
  61) definition : IDENTIFIER _ "(" string ")" iterator block
  62) definition : IDENTIFIER _ "(" literal ")" iterator block

  "("           shift, and go to state 21
  $default      reduce using rule 17 (literal)


state 13

  57) assignment : literal _ "=" expression selector
  58) connection : literal _ "=" literal selector

  "="           shift, and go to state 22


state 14

  59) include_file : INCLUDE _ string
  60) include_file : INCLUDE _ string INTO SCOPE

  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24

  string        go to state 25

state 15


  $end          shift, and go to state 26


state 16

   2) dsl : dsl config _

  $default      reduce using rule 2 (dsl)


state 17

  12) with_scope_do : WITH SCOPE _ DO
  13) with_scope_bracket : WITH SCOPE _ "{"

  DO            shift, and go to state 27
  "{"           shift, and go to state 28


state 18

   2) dsl : dsl _ config
  14) default_scope : with_scope_do dsl _ END

  SCOPE         shift, and go to state 11
  IDENTIFIER    shift, and go to state 12
  WITH          shift, and go to state 8
  END           shift, and go to state 29
  INCLUDE       shift, and go to state 14

  config        go to state 16
  assignment    go to state 3
  connection    go to state 4
  include_file  go to state 5
  definition    go to state 6
  default_scope  go to state 7
  with_scope_do  go to state 9
  with_scope_bracket  go to state 10
  literal       go to state 13

state 19

   2) dsl : dsl _ config
  15) default_scope : with_scope_bracket dsl _ "}"

  SCOPE         shift, and go to state 11
  IDENTIFIER    shift, and go to state 12
  WITH          shift, and go to state 8
  "}"           shift, and go to state 30
  INCLUDE       shift, and go to state 14

  config        go to state 16
  assignment    go to state 3
  connection    go to state 4
  include_file  go to state 5
  definition    go to state 6
  default_scope  go to state 7
  with_scope_do  go to state 9
  with_scope_bracket  go to state 10
  literal       go to state 13

state 20

  16) literal : SCOPE IDENTIFIER _

  $default      reduce using rule 16 (literal)


state 21

  61) definition : IDENTIFIER "(" _ string ")" iterator block
  62) definition : IDENTIFIER "(" _ literal ")" iterator block

  SCOPE         shift, and go to state 11
  IDENTIFIER    shift, and go to state 31
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24

  string        go to state 32
  literal       go to state 33

state 22

  57) assignment : literal "=" _ expression selector
  58) connection : literal "=" _ literal selector

  SCOPE         shift, and go to state 11
  IDENTIFIER    shift, and go to state 12
  INTEGER       shift, and go to state 34
  FLOAT         shift, and go to state 35
  "{"           shift, and go to state 46
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24
  BOOLEAN       shift, and go to state 38
  UNDEF         shift, and go to state 39
  "["           shift, and go to state 45

  string        go to state 36
  number        go to state 37
  scalar        go to state 40
  array         go to state 41
  hash          go to state 42
  definition    go to state 43
  value         go to state 44
  expression    go to state 47
  literal       go to state 48

state 23

  18) string : DOUBLE_QUOTED _

  $default      reduce using rule 18 (string)


state 24

  19) string : SINGLE_QUOTED _

  $default      reduce using rule 19 (string)


state 25

  59) include_file : INCLUDE string _
  60) include_file : INCLUDE string _ INTO SCOPE

  INTO          shift, and go to state 49
  $default      reduce using rule 59 (include_file)


state 26


  $default      accept


state 27

  12) with_scope_do : WITH SCOPE DO _

  $default      reduce using rule 12 (with_scope_do)


state 28

  13) with_scope_bracket : WITH SCOPE "{" _

  $default      reduce using rule 13 (with_scope_bracket)


state 29

  14) default_scope : with_scope_do dsl END _

  $default      reduce using rule 14 (default_scope)


state 30

  15) default_scope : with_scope_bracket dsl "}" _

  $default      reduce using rule 15 (default_scope)


state 31

  17) literal : IDENTIFIER _

  $default      reduce using rule 17 (literal)


state 32

  61) definition : IDENTIFIER "(" string _ ")" iterator block

  ")"           shift, and go to state 50


state 33

  62) definition : IDENTIFIER "(" literal _ ")" iterator block

  ")"           shift, and go to state 51


state 34

   3) number : INTEGER _

  $default      reduce using rule 3 (number)


state 35

   4) number : FLOAT _

  $default      reduce using rule 4 (number)


state 36

  20) scalar : string _

  $default      reduce using rule 20 (scalar)


state 37

  21) scalar : number _

  $default      reduce using rule 21 (scalar)


state 38

  22) scalar : BOOLEAN _

  $default      reduce using rule 22 (scalar)


state 39

  23) scalar : UNDEF _

  $default      reduce using rule 23 (scalar)


state 40

  24) value : scalar _

  $default      reduce using rule 24 (value)


state 41

  25) value : array _

  $default      reduce using rule 25 (value)


state 42

  26) value : hash _

  $default      reduce using rule 26 (value)


state 43

  27) value : definition _

  $default      reduce using rule 27 (value)


state 44

  29) expression : value _ "^" value
  30) expression : value _ "*" value
  31) expression : value _ "/" value
  32) expression : value _ "+" value
  33) expression : value _ "-" value
  34) expression : value _ OR value
  35) expression : value _ AND value
  36) expression : value _

  "^"           shift, and go to state 52
  "*"           shift, and go to state 53
  "/"           shift, and go to state 54
  "+"           shift, and go to state 55
  "-"           shift, and go to state 56
  OR            shift, and go to state 57
  AND           shift, and go to state 58
  $default      reduce using rule 36 (expression)


state 45

  37) array : "[" _ values optional_comma "]"
  38) array : "[" _ reference "," values optional_comma "]"
  39) array : "[" _ reference optional_comma "]"
  40) array : "[" _ "]"

  SCOPE         shift, and go to state 11
  IDENTIFIER    shift, and go to state 12
  INTEGER       shift, and go to state 34
  FLOAT         shift, and go to state 35
  "{"           shift, and go to state 46
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24
  BOOLEAN       shift, and go to state 38
  UNDEF         shift, and go to state 39
  "["           shift, and go to state 45
  "]"           shift, and go to state 62

  string        go to state 36
  number        go to state 37
  scalar        go to state 40
  array         go to state 41
  hash          go to state 42
  definition    go to state 43
  literal       go to state 59
  values        go to state 60
  reference     go to state 61
  value         go to state 63

state 46

  41) hash : "{" _ hashpairs optional_comma "}"
  42) hash : "{" _ "}"

  IDENTIFIER    shift, and go to state 67
  INTEGER       shift, and go to state 34
  FLOAT         shift, and go to state 35
  "}"           shift, and go to state 65
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24
  BOOLEAN       shift, and go to state 38
  UNDEF         shift, and go to state 39

  string        go to state 36
  number        go to state 37
  hashpairs     go to state 64
  hashpair      go to state 66
  scalar        go to state 68
  hashkey       go to state 69
  definition    go to state 70

state 47

  57) assignment : literal "=" expression _ selector

  SELECTOR      shift, and go to state 71
  $default      reduce using rule 10 (selector)

  selector      go to state 72

state 48

  58) connection : literal "=" literal _ selector

  SELECTOR      shift, and go to state 71
  $default      reduce using rule 10 (selector)

  selector      go to state 73

state 49

  60) include_file : INCLUDE string INTO _ SCOPE

  SCOPE         shift, and go to state 74


state 50

  61) definition : IDENTIFIER "(" string ")" _ iterator block

  FROM          shift, and go to state 76
  $default      reduce using rule 66 (iterator)

  iterator      go to state 75

state 51

  62) definition : IDENTIFIER "(" literal ")" _ iterator block

  FROM          shift, and go to state 76
  $default      reduce using rule 66 (iterator)

  iterator      go to state 77

state 52

  29) expression : value "^" _ value

  IDENTIFIER    shift, and go to state 79
  INTEGER       shift, and go to state 34
  FLOAT         shift, and go to state 35
  "{"           shift, and go to state 46
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24
  BOOLEAN       shift, and go to state 38
  UNDEF         shift, and go to state 39
  "["           shift, and go to state 45

  string        go to state 36
  number        go to state 37
  scalar        go to state 40
  array         go to state 41
  hash          go to state 42
  definition    go to state 43
  value         go to state 78

state 53

  30) expression : value "*" _ value

  IDENTIFIER    shift, and go to state 79
  INTEGER       shift, and go to state 34
  FLOAT         shift, and go to state 35
  "{"           shift, and go to state 46
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24
  BOOLEAN       shift, and go to state 38
  UNDEF         shift, and go to state 39
  "["           shift, and go to state 45

  string        go to state 36
  number        go to state 37
  scalar        go to state 40
  array         go to state 41
  hash          go to state 42
  definition    go to state 43
  value         go to state 80

state 54

  31) expression : value "/" _ value

  IDENTIFIER    shift, and go to state 79
  INTEGER       shift, and go to state 34
  FLOAT         shift, and go to state 35
  "{"           shift, and go to state 46
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24
  BOOLEAN       shift, and go to state 38
  UNDEF         shift, and go to state 39
  "["           shift, and go to state 45

  string        go to state 36
  number        go to state 37
  scalar        go to state 40
  array         go to state 41
  hash          go to state 42
  definition    go to state 43
  value         go to state 81

state 55

  32) expression : value "+" _ value

  IDENTIFIER    shift, and go to state 79
  INTEGER       shift, and go to state 34
  FLOAT         shift, and go to state 35
  "{"           shift, and go to state 46
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24
  BOOLEAN       shift, and go to state 38
  UNDEF         shift, and go to state 39
  "["           shift, and go to state 45

  string        go to state 36
  number        go to state 37
  scalar        go to state 40
  array         go to state 41
  hash          go to state 42
  definition    go to state 43
  value         go to state 82

state 56

  33) expression : value "-" _ value

  IDENTIFIER    shift, and go to state 79
  INTEGER       shift, and go to state 34
  FLOAT         shift, and go to state 35
  "{"           shift, and go to state 46
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24
  BOOLEAN       shift, and go to state 38
  UNDEF         shift, and go to state 39
  "["           shift, and go to state 45

  string        go to state 36
  number        go to state 37
  scalar        go to state 40
  array         go to state 41
  hash          go to state 42
  definition    go to state 43
  value         go to state 83

state 57

  34) expression : value OR _ value

  IDENTIFIER    shift, and go to state 79
  INTEGER       shift, and go to state 34
  FLOAT         shift, and go to state 35
  "{"           shift, and go to state 46
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24
  BOOLEAN       shift, and go to state 38
  UNDEF         shift, and go to state 39
  "["           shift, and go to state 45

  string        go to state 36
  number        go to state 37
  scalar        go to state 40
  array         go to state 41
  hash          go to state 42
  definition    go to state 43
  value         go to state 84

state 58

  35) expression : value AND _ value

  IDENTIFIER    shift, and go to state 79
  INTEGER       shift, and go to state 34
  FLOAT         shift, and go to state 35
  "{"           shift, and go to state 46
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24
  BOOLEAN       shift, and go to state 38
  UNDEF         shift, and go to state 39
  "["           shift, and go to state 45

  string        go to state 36
  number        go to state 37
  scalar        go to state 40
  array         go to state 41
  hash          go to state 42
  definition    go to state 43
  value         go to state 85

state 59

  28) reference : literal _

  $default      reduce using rule 28 (reference)


state 60

  37) array : "[" values _ optional_comma "]"
  54) values : values _ "," value
  55) values : values _ "," reference

  ","           shift, and go to state 87
  $default      reduce using rule 43 (optional_comma)

  optional_comma  go to state 86

state 61

  38) array : "[" reference _ "," values optional_comma "]"
  39) array : "[" reference _ optional_comma "]"

  ","           shift, and go to state 88
  $default      reduce using rule 43 (optional_comma)

  optional_comma  go to state 89

state 62

  40) array : "[" "]" _

  $default      reduce using rule 40 (array)


state 63

  56) values : value _

  $default      reduce using rule 56 (values)


state 64

  41) hash : "{" hashpairs _ optional_comma "}"
  46) hashpairs : hashpairs _ "," hashpair

  ","           shift, and go to state 91
  $default      reduce using rule 43 (optional_comma)

  optional_comma  go to state 90

state 65

  42) hash : "{" "}" _

  $default      reduce using rule 42 (hash)


state 66

  45) hashpairs : hashpair _

  $default      reduce using rule 45 (hashpairs)


state 67

  47) hashkey : IDENTIFIER _
  61) definition : IDENTIFIER _ "(" string ")" iterator block
  62) definition : IDENTIFIER _ "(" literal ")" iterator block

  "("           shift, and go to state 21
  $default      reduce using rule 47 (hashkey)


state 68

  48) hashkey : scalar _

  $default      reduce using rule 48 (hashkey)


state 69

  49) hashpair : hashkey _ ":" value
  50) hashpair : hashkey _ HASH_ROCKET value
  51) hashpair : hashkey _ ":" reference
  52) hashpair : hashkey _ HASH_ROCKET reference

  ":"           shift, and go to state 92
  HASH_ROCKET   shift, and go to state 93


state 70

  53) hashpair : definition _

  $default      reduce using rule 53 (hashpair)


state 71

  11) selector : SELECTOR _

  $default      reduce using rule 11 (selector)


state 72

  57) assignment : literal "=" expression selector _

  $default      reduce using rule 57 (assignment)


state 73

  58) connection : literal "=" literal selector _

  $default      reduce using rule 58 (connection)


state 74

  60) include_file : INCLUDE string INTO SCOPE _

  $default      reduce using rule 60 (include_file)


state 75

  61) definition : IDENTIFIER "(" string ")" iterator _ block

  DO            shift, and go to state 96
  "{"           shift, and go to state 95
  $default      reduce using rule 63 (block)

  block         go to state 94

state 76

  67) iterator : FROM _ INTEGER TO INTEGER

  INTEGER       shift, and go to state 97


state 77

  62) definition : IDENTIFIER "(" literal ")" iterator _ block

  DO            shift, and go to state 96
  "{"           shift, and go to state 95
  $default      reduce using rule 63 (block)

  block         go to state 98

state 78

  29) expression : value "^" value _

  $default      reduce using rule 29 (expression)


state 79

  61) definition : IDENTIFIER _ "(" string ")" iterator block
  62) definition : IDENTIFIER _ "(" literal ")" iterator block

  "("           shift, and go to state 21


state 80

  30) expression : value "*" value _

  $default      reduce using rule 30 (expression)


state 81

  31) expression : value "/" value _

  $default      reduce using rule 31 (expression)


state 82

  32) expression : value "+" value _

  $default      reduce using rule 32 (expression)


state 83

  33) expression : value "-" value _

  $default      reduce using rule 33 (expression)


state 84

  34) expression : value OR value _

  $default      reduce using rule 34 (expression)


state 85

  35) expression : value AND value _

  $default      reduce using rule 35 (expression)


state 86

  37) array : "[" values optional_comma _ "]"

  "]"           shift, and go to state 99


state 87

  44) optional_comma : "," _
  54) values : values "," _ value
  55) values : values "," _ reference

  SCOPE         shift, and go to state 11
  IDENTIFIER    shift, and go to state 12
  INTEGER       shift, and go to state 34
  FLOAT         shift, and go to state 35
  "{"           shift, and go to state 46
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24
  BOOLEAN       shift, and go to state 38
  UNDEF         shift, and go to state 39
  "["           shift, and go to state 45
  $default      reduce using rule 44 (optional_comma)

  string        go to state 36
  number        go to state 37
  scalar        go to state 40
  array         go to state 41
  hash          go to state 42
  definition    go to state 43
  literal       go to state 59
  value         go to state 100
  reference     go to state 101

state 88

  38) array : "[" reference "," _ values optional_comma "]"
  44) optional_comma : "," _

  IDENTIFIER    shift, and go to state 79
  INTEGER       shift, and go to state 34
  FLOAT         shift, and go to state 35
  "{"           shift, and go to state 46
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24
  BOOLEAN       shift, and go to state 38
  UNDEF         shift, and go to state 39
  "["           shift, and go to state 45
  $default      reduce using rule 44 (optional_comma)

  string        go to state 36
  number        go to state 37
  scalar        go to state 40
  array         go to state 41
  hash          go to state 42
  definition    go to state 43
  values        go to state 102
  value         go to state 63

state 89

  39) array : "[" reference optional_comma _ "]"

  "]"           shift, and go to state 103


state 90

  41) hash : "{" hashpairs optional_comma _ "}"

  "}"           shift, and go to state 104


state 91

  44) optional_comma : "," _
  46) hashpairs : hashpairs "," _ hashpair

  IDENTIFIER    shift, and go to state 67
  INTEGER       shift, and go to state 34
  FLOAT         shift, and go to state 35
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24
  BOOLEAN       shift, and go to state 38
  UNDEF         shift, and go to state 39
  $default      reduce using rule 44 (optional_comma)

  string        go to state 36
  number        go to state 37
  hashpair      go to state 105
  scalar        go to state 68
  hashkey       go to state 69
  definition    go to state 70

state 92

  49) hashpair : hashkey ":" _ value
  51) hashpair : hashkey ":" _ reference

  SCOPE         shift, and go to state 11
  IDENTIFIER    shift, and go to state 12
  INTEGER       shift, and go to state 34
  FLOAT         shift, and go to state 35
  "{"           shift, and go to state 46
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24
  BOOLEAN       shift, and go to state 38
  UNDEF         shift, and go to state 39
  "["           shift, and go to state 45

  string        go to state 36
  number        go to state 37
  scalar        go to state 40
  array         go to state 41
  hash          go to state 42
  definition    go to state 43
  literal       go to state 59
  value         go to state 106
  reference     go to state 107

state 93

  50) hashpair : hashkey HASH_ROCKET _ value
  52) hashpair : hashkey HASH_ROCKET _ reference

  SCOPE         shift, and go to state 11
  IDENTIFIER    shift, and go to state 12
  INTEGER       shift, and go to state 34
  FLOAT         shift, and go to state 35
  "{"           shift, and go to state 46
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24
  BOOLEAN       shift, and go to state 38
  UNDEF         shift, and go to state 39
  "["           shift, and go to state 45

  string        go to state 36
  number        go to state 37
  scalar        go to state 40
  array         go to state 41
  hash          go to state 42
  definition    go to state 43
  literal       go to state 59
  value         go to state 108
  reference     go to state 109

state 94

  61) definition : IDENTIFIER "(" string ")" iterator block _

  $default      reduce using rule 61 (definition)


state 95

  64) block : "{" _ hashpairs optional_comma "}"

  IDENTIFIER    shift, and go to state 67
  INTEGER       shift, and go to state 34
  FLOAT         shift, and go to state 35
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24
  BOOLEAN       shift, and go to state 38
  UNDEF         shift, and go to state 39

  string        go to state 36
  number        go to state 37
  hashpair      go to state 66
  hashpairs     go to state 110
  scalar        go to state 68
  hashkey       go to state 69
  definition    go to state 70

state 96

  65) block : DO _ hashpairs optional_comma END

  IDENTIFIER    shift, and go to state 67
  INTEGER       shift, and go to state 34
  FLOAT         shift, and go to state 35
  DOUBLE_QUOTED  shift, and go to state 23
  SINGLE_QUOTED  shift, and go to state 24
  BOOLEAN       shift, and go to state 38
  UNDEF         shift, and go to state 39

  string        go to state 36
  number        go to state 37
  hashpair      go to state 66
  hashpairs     go to state 111
  scalar        go to state 68
  hashkey       go to state 69
  definition    go to state 70

state 97

  67) iterator : FROM INTEGER _ TO INTEGER

  TO            shift, and go to state 112


state 98

  62) definition : IDENTIFIER "(" literal ")" iterator block _

  $default      reduce using rule 62 (definition)


state 99

  37) array : "[" values optional_comma "]" _

  $default      reduce using rule 37 (array)


state 100

  54) values : values "," value _

  $default      reduce using rule 54 (values)


state 101

  55) values : values "," reference _

  $default      reduce using rule 55 (values)


state 102

  38) array : "[" reference "," values _ optional_comma "]"
  54) values : values _ "," value
  55) values : values _ "," reference

  ","           shift, and go to state 87
  $default      reduce using rule 43 (optional_comma)

  optional_comma  go to state 113

state 103

  39) array : "[" reference optional_comma "]" _

  $default      reduce using rule 39 (array)


state 104

  41) hash : "{" hashpairs optional_comma "}" _

  $default      reduce using rule 41 (hash)


state 105

  46) hashpairs : hashpairs "," hashpair _

  $default      reduce using rule 46 (hashpairs)


state 106

  49) hashpair : hashkey ":" value _

  $default      reduce using rule 49 (hashpair)


state 107

  51) hashpair : hashkey ":" reference _

  $default      reduce using rule 51 (hashpair)


state 108

  50) hashpair : hashkey HASH_ROCKET value _

  $default      reduce using rule 50 (hashpair)


state 109

  52) hashpair : hashkey HASH_ROCKET reference _

  $default      reduce using rule 52 (hashpair)


state 110

  46) hashpairs : hashpairs _ "," hashpair
  64) block : "{" hashpairs _ optional_comma "}"

  ","           shift, and go to state 91
  $default      reduce using rule 43 (optional_comma)

  optional_comma  go to state 114

state 111

  46) hashpairs : hashpairs _ "," hashpair
  65) block : DO hashpairs _ optional_comma END

  ","           shift, and go to state 91
  $default      reduce using rule 43 (optional_comma)

  optional_comma  go to state 115

state 112

  67) iterator : FROM INTEGER TO _ INTEGER

  INTEGER       shift, and go to state 116


state 113

  38) array : "[" reference "," values optional_comma _ "]"

  "]"           shift, and go to state 117


state 114

  64) block : "{" hashpairs optional_comma _ "}"

  "}"           shift, and go to state 118


state 115

  65) block : DO hashpairs optional_comma _ END

  END           shift, and go to state 119


state 116

  67) iterator : FROM INTEGER TO INTEGER _

  $default      reduce using rule 67 (iterator)


state 117

  38) array : "[" reference "," values optional_comma "]" _

  $default      reduce using rule 38 (array)


state 118

  64) block : "{" hashpairs optional_comma "}" _

  $default      reduce using rule 64 (block)


state 119

  65) block : DO hashpairs optional_comma END _

  $default      reduce using rule 65 (block)

